//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""3a5aa50e-886a-4bab-a2a8-8a7806dff542"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2edcaba1-5223-422d-8fe1-c46e67e1e700"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7c78e015-e1a2-4a62-b8f9-aa7616c51d55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""46f1b707-a8d3-42b1-ad7c-d4920d4292ef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Walking"",
                    ""type"": ""Button"",
                    ""id"": ""58797597-0bf5-4719-80f2-04edf9b32487"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""440bfff2-4ad1-4b55-8836-0fd35b907f31"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c3c13923-e679-4954-a546-e282b6b1ea32"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1bebcfcd-e076-409b-b976-ae338a535730"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""00250269-1cac-4cbe-81e4-aa66b456666c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""41946432-6c9f-40b4-8e2e-622b440abba2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6d3affb5-47f9-40e0-87ed-0f64dc96c57a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c38a0405-d198-4516-aeb6-6066651b514e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7dfc27f-fb93-4415-beda-7a6b51bdf744"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInventory"",
            ""id"": ""2ef07ff6-09d8-417b-bc29-b3677deae50f"",
            ""actions"": [
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""747cb7c0-3edc-4bdb-a518-9e4e69302f77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pick"",
                    ""type"": ""Button"",
                    ""id"": ""6769a1e6-a2d9-4719-80ce-7de9ecc55d48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchPrimaryItem"",
                    ""type"": ""Button"",
                    ""id"": ""716ac563-94c3-4738-b24b-cf951aebeecb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchSecondaryItem"",
                    ""type"": ""Button"",
                    ""id"": ""234e6cbd-3f97-4fca-b4e7-cde6cd2d3e4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchMelee"",
                    ""type"": ""Button"",
                    ""id"": ""dcafba4f-fc5f-465e-9869-4da5e969ad8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchBomb"",
                    ""type"": ""Button"",
                    ""id"": ""e532c1cb-a971-437d-a970-7d0418c70498"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f21ef465-eb54-4f21-a13a-1b32f2c90883"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ff92263-d9d7-4ab7-b6fe-db8827639e69"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dee5f55b-ad0e-4af7-9d1d-8cf032c3d304"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchPrimaryItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae870c04-1282-45a2-bdc4-a897e5751c79"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchSecondaryItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab1ab532-a36c-47d2-82f5-79ed7f1181f9"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchMelee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f065987b-a1da-4a57-b27c-adbd053dd569"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerBomb"",
            ""id"": ""4e2f8d38-5fb7-40cb-8479-6bf6685bbbf5"",
            ""actions"": [
                {
                    ""name"": ""Planting"",
                    ""type"": ""Button"",
                    ""id"": ""4bb4eb2c-9f68-4c80-b727-1413288a1f82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Defuse"",
                    ""type"": ""Button"",
                    ""id"": ""6a3fb735-73cf-457c-8f8e-46716610f334"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4bd00f3-c30b-4b9b-883e-2c4f5568504c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Planting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21a1642e-65a7-4d37-a540-e01d61bfd061"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Planting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c867b950-4a39-418d-9530-df12aec66089"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Defuse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerShoot"",
            ""id"": ""f39b93d3-21d5-4a7b-b20a-9d11acb3d000"",
            ""actions"": [
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""6d683af0-8e74-46eb-af20-b1115558ddf9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""9e03eac3-8878-4421-823e-a71b46811524"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""37132ca8-28a1-41f7-b3b7-a7bcd1377811"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""080d1df4-c601-463f-b8b5-5d799a0385fa"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95483e6f-ee74-40ad-bbb4-a951df965324"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87db35d8-b96c-46c2-a31f-90a737964dd9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Console"",
            ""id"": ""f529fa0e-25a7-4cb3-a9a5-db5a280632e8"",
            ""actions"": [
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""82685f5e-51a9-48fa-bf82-54b6edda5e52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f718ef3-90ff-4627-88b0-4ec378660431"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Jump = m_PlayerMovement.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMovement_Look = m_PlayerMovement.FindAction("Look", throwIfNotFound: true);
        m_PlayerMovement_Walking = m_PlayerMovement.FindAction("Walking", throwIfNotFound: true);
        // PlayerInventory
        m_PlayerInventory = asset.FindActionMap("PlayerInventory", throwIfNotFound: true);
        m_PlayerInventory_Drop = m_PlayerInventory.FindAction("Drop", throwIfNotFound: true);
        m_PlayerInventory_Pick = m_PlayerInventory.FindAction("Pick", throwIfNotFound: true);
        m_PlayerInventory_SwitchPrimaryItem = m_PlayerInventory.FindAction("SwitchPrimaryItem", throwIfNotFound: true);
        m_PlayerInventory_SwitchSecondaryItem = m_PlayerInventory.FindAction("SwitchSecondaryItem", throwIfNotFound: true);
        m_PlayerInventory_SwitchMelee = m_PlayerInventory.FindAction("SwitchMelee", throwIfNotFound: true);
        m_PlayerInventory_SwitchBomb = m_PlayerInventory.FindAction("SwitchBomb", throwIfNotFound: true);
        // PlayerBomb
        m_PlayerBomb = asset.FindActionMap("PlayerBomb", throwIfNotFound: true);
        m_PlayerBomb_Planting = m_PlayerBomb.FindAction("Planting", throwIfNotFound: true);
        m_PlayerBomb_Defuse = m_PlayerBomb.FindAction("Defuse", throwIfNotFound: true);
        // PlayerShoot
        m_PlayerShoot = asset.FindActionMap("PlayerShoot", throwIfNotFound: true);
        m_PlayerShoot_Primary = m_PlayerShoot.FindAction("Primary", throwIfNotFound: true);
        m_PlayerShoot_Secondary = m_PlayerShoot.FindAction("Secondary", throwIfNotFound: true);
        m_PlayerShoot_Reload = m_PlayerShoot.FindAction("Reload", throwIfNotFound: true);
        // Console
        m_Console = asset.FindActionMap("Console", throwIfNotFound: true);
        m_Console_Open = m_Console.FindAction("Open", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Jump;
    private readonly InputAction m_PlayerMovement_Look;
    private readonly InputAction m_PlayerMovement_Walking;
    public struct PlayerMovementActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerMovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerMovement_Jump;
        public InputAction @Look => m_Wrapper.m_PlayerMovement_Look;
        public InputAction @Walking => m_Wrapper.m_PlayerMovement_Walking;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLook;
                @Walking.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnWalking;
                @Walking.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnWalking;
                @Walking.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnWalking;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Walking.started += instance.OnWalking;
                @Walking.performed += instance.OnWalking;
                @Walking.canceled += instance.OnWalking;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerInventory
    private readonly InputActionMap m_PlayerInventory;
    private IPlayerInventoryActions m_PlayerInventoryActionsCallbackInterface;
    private readonly InputAction m_PlayerInventory_Drop;
    private readonly InputAction m_PlayerInventory_Pick;
    private readonly InputAction m_PlayerInventory_SwitchPrimaryItem;
    private readonly InputAction m_PlayerInventory_SwitchSecondaryItem;
    private readonly InputAction m_PlayerInventory_SwitchMelee;
    private readonly InputAction m_PlayerInventory_SwitchBomb;
    public struct PlayerInventoryActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerInventoryActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drop => m_Wrapper.m_PlayerInventory_Drop;
        public InputAction @Pick => m_Wrapper.m_PlayerInventory_Pick;
        public InputAction @SwitchPrimaryItem => m_Wrapper.m_PlayerInventory_SwitchPrimaryItem;
        public InputAction @SwitchSecondaryItem => m_Wrapper.m_PlayerInventory_SwitchSecondaryItem;
        public InputAction @SwitchMelee => m_Wrapper.m_PlayerInventory_SwitchMelee;
        public InputAction @SwitchBomb => m_Wrapper.m_PlayerInventory_SwitchBomb;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInventoryActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInventoryActions instance)
        {
            if (m_Wrapper.m_PlayerInventoryActionsCallbackInterface != null)
            {
                @Drop.started -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnDrop;
                @Drop.performed -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnDrop;
                @Drop.canceled -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnDrop;
                @Pick.started -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnPick;
                @Pick.performed -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnPick;
                @Pick.canceled -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnPick;
                @SwitchPrimaryItem.started -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchPrimaryItem;
                @SwitchPrimaryItem.performed -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchPrimaryItem;
                @SwitchPrimaryItem.canceled -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchPrimaryItem;
                @SwitchSecondaryItem.started -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchSecondaryItem;
                @SwitchSecondaryItem.performed -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchSecondaryItem;
                @SwitchSecondaryItem.canceled -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchSecondaryItem;
                @SwitchMelee.started -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchMelee;
                @SwitchMelee.performed -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchMelee;
                @SwitchMelee.canceled -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchMelee;
                @SwitchBomb.started -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchBomb;
                @SwitchBomb.performed -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchBomb;
                @SwitchBomb.canceled -= m_Wrapper.m_PlayerInventoryActionsCallbackInterface.OnSwitchBomb;
            }
            m_Wrapper.m_PlayerInventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @Pick.started += instance.OnPick;
                @Pick.performed += instance.OnPick;
                @Pick.canceled += instance.OnPick;
                @SwitchPrimaryItem.started += instance.OnSwitchPrimaryItem;
                @SwitchPrimaryItem.performed += instance.OnSwitchPrimaryItem;
                @SwitchPrimaryItem.canceled += instance.OnSwitchPrimaryItem;
                @SwitchSecondaryItem.started += instance.OnSwitchSecondaryItem;
                @SwitchSecondaryItem.performed += instance.OnSwitchSecondaryItem;
                @SwitchSecondaryItem.canceled += instance.OnSwitchSecondaryItem;
                @SwitchMelee.started += instance.OnSwitchMelee;
                @SwitchMelee.performed += instance.OnSwitchMelee;
                @SwitchMelee.canceled += instance.OnSwitchMelee;
                @SwitchBomb.started += instance.OnSwitchBomb;
                @SwitchBomb.performed += instance.OnSwitchBomb;
                @SwitchBomb.canceled += instance.OnSwitchBomb;
            }
        }
    }
    public PlayerInventoryActions @PlayerInventory => new PlayerInventoryActions(this);

    // PlayerBomb
    private readonly InputActionMap m_PlayerBomb;
    private IPlayerBombActions m_PlayerBombActionsCallbackInterface;
    private readonly InputAction m_PlayerBomb_Planting;
    private readonly InputAction m_PlayerBomb_Defuse;
    public struct PlayerBombActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerBombActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Planting => m_Wrapper.m_PlayerBomb_Planting;
        public InputAction @Defuse => m_Wrapper.m_PlayerBomb_Defuse;
        public InputActionMap Get() { return m_Wrapper.m_PlayerBomb; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBombActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerBombActions instance)
        {
            if (m_Wrapper.m_PlayerBombActionsCallbackInterface != null)
            {
                @Planting.started -= m_Wrapper.m_PlayerBombActionsCallbackInterface.OnPlanting;
                @Planting.performed -= m_Wrapper.m_PlayerBombActionsCallbackInterface.OnPlanting;
                @Planting.canceled -= m_Wrapper.m_PlayerBombActionsCallbackInterface.OnPlanting;
                @Defuse.started -= m_Wrapper.m_PlayerBombActionsCallbackInterface.OnDefuse;
                @Defuse.performed -= m_Wrapper.m_PlayerBombActionsCallbackInterface.OnDefuse;
                @Defuse.canceled -= m_Wrapper.m_PlayerBombActionsCallbackInterface.OnDefuse;
            }
            m_Wrapper.m_PlayerBombActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Planting.started += instance.OnPlanting;
                @Planting.performed += instance.OnPlanting;
                @Planting.canceled += instance.OnPlanting;
                @Defuse.started += instance.OnDefuse;
                @Defuse.performed += instance.OnDefuse;
                @Defuse.canceled += instance.OnDefuse;
            }
        }
    }
    public PlayerBombActions @PlayerBomb => new PlayerBombActions(this);

    // PlayerShoot
    private readonly InputActionMap m_PlayerShoot;
    private IPlayerShootActions m_PlayerShootActionsCallbackInterface;
    private readonly InputAction m_PlayerShoot_Primary;
    private readonly InputAction m_PlayerShoot_Secondary;
    private readonly InputAction m_PlayerShoot_Reload;
    public struct PlayerShootActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerShootActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Primary => m_Wrapper.m_PlayerShoot_Primary;
        public InputAction @Secondary => m_Wrapper.m_PlayerShoot_Secondary;
        public InputAction @Reload => m_Wrapper.m_PlayerShoot_Reload;
        public InputActionMap Get() { return m_Wrapper.m_PlayerShoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerShootActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerShootActions instance)
        {
            if (m_Wrapper.m_PlayerShootActionsCallbackInterface != null)
            {
                @Primary.started -= m_Wrapper.m_PlayerShootActionsCallbackInterface.OnPrimary;
                @Primary.performed -= m_Wrapper.m_PlayerShootActionsCallbackInterface.OnPrimary;
                @Primary.canceled -= m_Wrapper.m_PlayerShootActionsCallbackInterface.OnPrimary;
                @Secondary.started -= m_Wrapper.m_PlayerShootActionsCallbackInterface.OnSecondary;
                @Secondary.performed -= m_Wrapper.m_PlayerShootActionsCallbackInterface.OnSecondary;
                @Secondary.canceled -= m_Wrapper.m_PlayerShootActionsCallbackInterface.OnSecondary;
                @Reload.started -= m_Wrapper.m_PlayerShootActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_PlayerShootActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_PlayerShootActionsCallbackInterface.OnReload;
            }
            m_Wrapper.m_PlayerShootActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Primary.started += instance.OnPrimary;
                @Primary.performed += instance.OnPrimary;
                @Primary.canceled += instance.OnPrimary;
                @Secondary.started += instance.OnSecondary;
                @Secondary.performed += instance.OnSecondary;
                @Secondary.canceled += instance.OnSecondary;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
            }
        }
    }
    public PlayerShootActions @PlayerShoot => new PlayerShootActions(this);

    // Console
    private readonly InputActionMap m_Console;
    private IConsoleActions m_ConsoleActionsCallbackInterface;
    private readonly InputAction m_Console_Open;
    public struct ConsoleActions
    {
        private @PlayerInput m_Wrapper;
        public ConsoleActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Open => m_Wrapper.m_Console_Open;
        public InputActionMap Get() { return m_Wrapper.m_Console; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConsoleActions set) { return set.Get(); }
        public void SetCallbacks(IConsoleActions instance)
        {
            if (m_Wrapper.m_ConsoleActionsCallbackInterface != null)
            {
                @Open.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnOpen;
                @Open.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnOpen;
                @Open.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnOpen;
            }
            m_Wrapper.m_ConsoleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Open.started += instance.OnOpen;
                @Open.performed += instance.OnOpen;
                @Open.canceled += instance.OnOpen;
            }
        }
    }
    public ConsoleActions @Console => new ConsoleActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnWalking(InputAction.CallbackContext context);
    }
    public interface IPlayerInventoryActions
    {
        void OnDrop(InputAction.CallbackContext context);
        void OnPick(InputAction.CallbackContext context);
        void OnSwitchPrimaryItem(InputAction.CallbackContext context);
        void OnSwitchSecondaryItem(InputAction.CallbackContext context);
        void OnSwitchMelee(InputAction.CallbackContext context);
        void OnSwitchBomb(InputAction.CallbackContext context);
    }
    public interface IPlayerBombActions
    {
        void OnPlanting(InputAction.CallbackContext context);
        void OnDefuse(InputAction.CallbackContext context);
    }
    public interface IPlayerShootActions
    {
        void OnPrimary(InputAction.CallbackContext context);
        void OnSecondary(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
    public interface IConsoleActions
    {
        void OnOpen(InputAction.CallbackContext context);
    }
}
